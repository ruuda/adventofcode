let lines = std.read_file_utf8("input.txt").split_lines();
let cards = [
  for line in lines:
  // Split "Card {n}: {numbers}" into parts.
  let card_id_numbers = line.split(": ");
  let card_id = card_id_numbers[0].split(" ")[-1].parse_int();
  let wins_haves_str = card_id_numbers[1].split(" | ");
  let wins_haves = [
    for numbers in wins_haves_str: {
      for n in numbers.split(" "): if n != "": n.parse_int()
    }
  ];
  { id = card_id, wins = wins_haves[0], haves = wins_haves[1] }
];

// Points computation for part 1.
let card_points = card => [
  for n in card.haves:
  if card.wins.contains(n):
  n
].fold(0, (score, n) => if score == 0: 1 else score * 2);

// Computation for part 2. We recursively build a list with the "depth" of every
// card, starting from the back, because earlier cards only reference later
// cards.
let card_depths = (self, i) =>
  if i >= cards.len():
    []
  else
    let depths = self(self, i + 1);
    let card = cards[i];
    let n_matches = [for n in card.haves: if card.wins.contains(n): 1].len();
    // Sum up the depths for the next n matches.
    // TODO: Add slicing to make this easier.
    let next_depths = [for j in std.range(0, n_matches): depths[j]];
    let depth_i = next_depths.fold(1, (x, y) => x + y);
    [depth_i, for d in depths: d];

{
  part1 = [for card in cards: card_points(card)].fold(0, (x, y) => x + y),
  part2 = card_depths(card_depths, 0).fold(0, (x, y) => x + y),
}
