// This is an attempt to rewrite the Nim version in RCL to dogfood RCL.
let data = std.read_file_utf8("example.txt");
let sections = data.split("\n\n");
let seeds = [for x in sections[0].split(": ")[1].split(" "): x.parse_int()];
let maps = [
  for section in sections:
  // TODO: Add a better way to exclude the first element, in this case list
  // slicing, but but string `starts_with` would also help.
  if section != sections[0]:
  let name_entries = section.split(":\n");
  let entries = name_entries[1].split("\n");
  [
    for entry in entries:
    if entry != "":
    let nums = entry.split(" ");
    {
      dst_start = nums[0].parse_int(),
      src_start = nums[1].parse_int(),
      range_len = nums[2].parse_int(),
    }
  ],
];

// Helper functions for dealing with ranges of integers, and implementing the
// move from the exercise on them.
let range = (begin, end) => { begin = begin, end = end };
let offset_range = (r, off) => { for k, v in r: k: v + off };
let move_range = (in_range, map_range, offset) =>
  if in_range.end <= map_range.begin:
    // No overlap
    { unmapped = [in_range], mapped = [] }

  else if in_range.begin >= map_range.past_end:
    { unmapped = [in_range], mapped = [] }

  else if (
    (in_range.begin >= map_range.begin)
    and (in_range.past_end <= map_range.past_end)
  ):
    // The inner range is contained so we map the entire thing.
    { mapped = [offset_range(in_range, offset)], unmapped = [] }

  else if (
    (map_range.begin >= in_range.begin)
    and (map_range.past_end <= in_range.past_end)
  ):
    // The map range is contained, so we have to slice it out.
    {
      mapped = [offset_range(map_range, offset)],
      unmapped = [
        range(in_range.begin, map_range.begin),
        range(map_range.end, in_range.end),
      ],
    }

  else if map_range.begin <= in_range.begin:
    // The map range overlaps the left-hand side.
    assert map_range.past_end <= in_range.past_end, "Ranges must be consistent.";
    {
      mapped = [range(in_range.begin + offset, map_range.end + offset)],
      unmapped = [range(map_range.end, in_range.end)],
    }

  else
    // The map range overlaps the right-hand side.
    assert map_range.begin >= in_range.begin, "Cases are exhaustive.";
    {
      mapped = [range(map_range.begin + offset, in_range.end + offset)],
      unmapped = [range(in_range.begin, map_range.begin)],
    };

// TODO: Apply these functions to solve the puzzle.
{
  seeds = seeds,
  maps = maps,
}
