let map = [
  for line in std.read_file_utf8("example.txt").split_lines(): [
    for char in line.chars():
    char.parse_int()
  ]
];

let map_w = map[0].len();
let map_h = map.len();

let at_exit = node => (node.x == (map_w - 1)) and (node.y == (map_h - 1));

let in_bounds = node => true
  and (node.x >= 0)
  and (node.x < map_w)
  and (node.y >= 0)
  and (node.y < map_h);

let heat_loss = node => map[node.y][node.x];

let crucibles = {
  part1 = { min_ahead = 0, max_ahead = 3 },
  part2 = { min_ahead = 4, max_ahead = 10 },
};

// Return the set of start nodes. The set is a set of [cost, node] tuples, where
// lower cost is better.
let start_nodes = crucible =>
  let node = dir => {
    x = 0,
    y = 0,
    dir = dir,
    min_ahead = crucible.min_ahead,
    max_ahead = crucible.max_ahead,
    is_valid = true,
  };
  {[0, node("east")], [0, node("south")]};

// All the directions we can go in from the given starting direction.
let turns = {
  east = ["south", "east", "north"],
  north = ["east", "north", "west"],
  west = ["north", "west", "south"],
  south = ["west", "south", "east"],
};
let dx = { east = -1, west = 1 };
let dy = { north = -1, south = 1 };

// Make a step in the given direction from the node.
let step = (crucible, node, dir) => 
  let ahead = node.dir == dir;
  let can_ahead = node.max_ahead > 0;
  let can_turn = node.min_ahead <= 0;
  {
    x = node.x + dx.get(dir, 0),
    y = node.y + dy.get(dir, 0),
    dir = dir,
    min_ahead = (if ahead: node else crucible).min_ahead - 1,
    max_ahead = (if ahead: node else crucible).max_ahead - 1,
    is_valid = if ahead: can_ahead else can_turn,
  };

// Take all valid steps from the given node.
let steps = (crucible, node) => [
  for new_dir in turns.get(node.dir, "TODO: Dict indexing."):
  let new_node = step(crucible, node, new_dir);
  if new_node.is_valid and in_bounds(node):
  new_node
];

// Hack to treat a set as a priority queue and pop the front element. This
// relies on the implementation detail that sets are b-tree sets and therefore
// sorted, and the plan is to change that in RCL, so this is fragile. TODO.
let pop_front = xs =>
  let xs_list = [for x in xs: x];
  {
    head = xs_list[0],
    tail = {for i in std.range(1, xs.len()): xs_list[i]},
  };

let best_route_cost = crucible =>
  let route_rec = (self, open, closed) =>
    let pop = pop_front(open);
    // The open set contains tuples of [cost, node].
    let cost = pop.head[0];
    let node = pop.head[1];
    let new_open = pop.tail;

    if at_exit(node):
      // If we are at the exit, then the cost so far is the final cost.
      cost

    else if closed.contains(node):
      // If we've visited this node already, then recur with the new opens.
      self(self, new_open, closed)

    else
      // Finally, explore all possible steps from here.
      let new_closed = {node, for n in closed: n};
      let new_open = {
        for n in steps(crucible, node): [cost + heat_loss(n), n],
        for x in open: x,
      };
      self(self, new_open, new_closed);

  let empty_set = {for x in []: x};
  // TODO: So it fails with a stack overflow ... Adding tail calls to RCL is not
  // really what I want because code golfing is a fringe use case and recursive
  // functions should be exceedingly rare in real-world use cases.
  route_rec(route_rec, start_nodes(crucible), empty_set);

{
  for part, crucible in crucibles:
  part: best_route_cost(crucible)
}
